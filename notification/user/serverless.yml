service: "swb-tools-user-notification"

frameworkVersion: "3"

provider:
  name: "aws"
  runtime: "nodejs14.x"

package:
  patterns:
    - "!node_modules/**"
    - "!package.json"
    - "!template.js"
    - "!pnpm-lock.yaml"
    - "!*.test.js"
    - "!__snapshots__/**"

custom:
  config: ${file(../../configs/stage.${sls:stage}.yml)}
  info: ${file(./package.json)}
  template: ${file(../../configs/${self:custom.config.emailTemplateName}.json)}
  layerLodash: ${file(../../layers/lodash/nodejs/package.json)}
  streamArn: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.config.userTableName}/stream/${self:custom.config.userTableStream}"
  templateName: "${self:service}-${self:custom.template.templateName}"

functions:
  ActivationNotification:
    handler: "handler.activation"
    name: "${self:service}-${sls:stage}"
    description: ${self:custom.info.description}
    layers:
      - "arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${layerName(${self:custom.layerLodash})}-${sls:stage}:1"
    events:
      - stream:
          type: "dynamodb"
          arn: ${self:custom.streamArn}
          # To reduce invokations and associated costs, function is invoked when one of the following conditions is met:
          # The payload size reaches 6MB, the Batch Window reaches its maximum value, or the Batch Size reaches its maximum value.
          batchSize: 5 # (default: 100, max 1000)
          batchWindow: 120 # 2 minutes # (max 300 seconds)
          startingPosition: "LATEST"
          filterPatterns:
            - eventName: ["MODIFY"]
              dynamodb:
                OldImage:
                  status:
                    S: ["pending", "inactive"]
                NewImage:
                  status:
                    S: ["active"]
    iamRoleStatementsName: "${self:service}-${sls:stage}-lambda"
    iamRoleStatements:
      - Effect: "Allow"     
        Action:
          - "dynamodb:DescribeStream"
          - "dynamodb:GetRecords"
          - "dynamodb:GetShardIterator"
          - "dynamodb:ListStreams"
        Resource: ${self:custom.streamArn}
      - Effect: "Allow"
        Action:
          - ses:SendTemplatedEmail
        Resource: "*"
    environment:
      REGION: ${aws:region}
      TEMPLATE: ${self:custom.templateName}
      FROM_EMAIL: ${self:custom.config.fromEmail}
      FROM_NAME: ${self:custom.config.fromName}

resources:
  Resources:
    UserNotificationTemplate:
      Type: "AWS::SES::Template"
      Properties: 
        Template: 
          TemplateName: ${self:custom.templateName}
          HtmlPart: ${self:custom.template.body}
          SubjectPart: ${self:custom.template.subject}

plugins:
  - "serverless-iam-roles-per-function"
  - ../../layers/layerNamePlugin
